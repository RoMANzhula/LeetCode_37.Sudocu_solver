public class Main {
    public static void main(String[] args) {

    }

    public void solveSudoku(char[][] board) { //метод, который решает игру Судоку, принимая на вход двумерный массив
        if (board == null || board.length == 0) { //проверяем, что наш массив (задача по Судоку) не равна null и 0
            return; //если пустая - то ничего не выполняется
        }
        solve(board); //если все ОК, то вызываем метод решить, передав в него наш массив с задачей по Судоку
    }

    private boolean solve(char[][] board) { //метод с рекурсивным пошаговым решением
        for (int row = 0; row < board.length; row++) { //проходим по рядкам двумерного массива (горизонтальные линии)
            for (int col = 0; col < board[0].length; col++) { //проходим по колонкам двумерного массива (вертикальные линии)
                if (board[row][col] == '.') { //если в нашей ячейке встречается точка ".", то
                    for (char num = '1'; num <= '9'; num++) { //проверяем какую цифру от 1 до 9 мы можем установить в ячейку
                        if (isValid(board, row, col, num)) { //Метод isValid() проверяет наличие цифры num в той же строке, столбце
                            // или 3x3 квадрате, в котором находится данная ячейка (row, col). Если нигде не находит такой цифры,
                            // то метод возвращает true, иначе - false
                            board[row][col] = num; //заменяем точку на число
                            if (solve(board)) { //рекурсивно вызываем метод и если решение было верно, то
                                return true; //возвращаем true и поиск решения останавливается
                            } else { //иначе, значение текущей ячейки сбрасывается обратно на '.', чтобы вернуть доску к
                                // предыдущему состоянию и продолжить поиск решения в другой ячейке
                                board[row][col] = '.';
                            }
                        }
                    }
                    return false; //если ни одно решение не сработало, возвращаем false
                }
            }
        }
        return true; //если все ОК, то Судоку решено
    }

    private boolean isValid(char[][] board, int row, int col, char num) { //метод, который проверяет валидное(допустимо) ли
        //число, которое мы хотим установить в ячейку игрового поля, проверив вертикальную и горизонтальную линии, а так же
        //проверив квадрат 3х3
        for (int i = 0; i < 9; i++) { //обьявляем цикл на 9 итераций
            if (board[row][i] == num || board[i][col] == num ||
                    board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == num) { //если в горизонтальной линии или в вертикальной
                //линии или в квадрате 3х3 число num присутствует, то
                return false; //возвращаем false
            }
        }
        return true; //если все Ок, то число подошло
    }
}